<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000" preserveAspectRatio="xMinYMin" onload="run()">
	<script type="text/ecmascript"><![CDATA[
		function run(){
			const MAX_X = 1000;
			const MAX_Y = 1000;

			const 重力 = 0.2;
			const 反発係数 = 0.9;
			const 摩擦係数 = 0.98;

			// ボールオブジェクト
			function Ball(circle){
				this.circle = circle;
				this.x = circle.cx.baseVal;
				this.y = circle.cy.baseVal;
				this.r = circle.r.baseVal;
				this.xSpeed = Math.random() * 10;
				this.ySpeed = 0;

				circle.ball = this;
				circle.addEventListener("click", remove, false);
			}

			Ball.prototype.getLeft = function(){
				return this.x.value - this.r.value;
			}

			Ball.prototype.getRight = function(){
				return this.x.value + this.r.value;
			}

			Ball.prototype.getTop = function(){
				return this.y.value - this.r.value;
			}

			Ball.prototype.getBottom = function(){
				return this.y.value + this.r.value;
			}

			Ball.prototype.setLeft = function(x){
				this.x.value = x + this.r.value;
			}

			Ball.prototype.setRight = function(x){
				this.x.value = x - this.r.value;
			}

			Ball.prototype.setTop = function(y){
				this.y.value = y + this.r.value;
			}

			Ball.prototype.setBottom = function(y){
				this.y.value = y - this.r.value;
			}

			Ball.prototype.update = function(){
				this.ySpeed += 重力; // y座標の更新よりySpeedの更新を先にしないと、床で小刻みに跳ね続ける。
				this.x.value += this.xSpeed;
				this.y.value += this.ySpeed;
			}

			// 初期化
			var circles = document.getElementsByTagName("circle")

			var balls = new Array(circles.length);

			for (i = 0, l = circles.length; i < l; i++){
				balls[i] = new Ball(circles[i]);
			}

			var timer = setInterval(function(){
				for(i=0, l=balls.length; i < l; i++){
					var ball = balls[i];
					ball.update();

					// 壁との当たり判定処理
					if(ball.getLeft() < 0){
						ball.setLeft(0);
						ball.xSpeed *= -反発係数;
					}

					if(ball.getRight() > MAX_X){
						ball.setRight(MAX_X);
						ball.xSpeed *= -反発係数;
					}

					// 天井との当たり判定処理
					if(ball.getTop() < 0){
						ball.setTop(0);
						ball.ySpeed *= -反発係数;
					}

					// 床との当たり判定処理
					if (ball.getBottom() > MAX_Y){
						ball.setBottom(MAX_Y);
						ball.ySpeed *= -反発係数;
						ball.xSpeed *= 摩擦係数;
					}
				}

				// 他のボールとの当たり判定処理
				for(i=0, l=balls.length; i < l; i++){
					var ball1 = balls[i];
					for (j=i+1; j <l;j++){
						var ball2 = balls[j];
						var x距離 = ball1.x.value - ball2.x.value;
						var y距離 = ball1.y.value - ball2.y.value;
						var 距離の2乗 = x距離 * x距離 + y距離 * y距離;
						var 半径の和 = ball1.r.value + ball2.r.value;
						var 半径の和の2乗 = 半径の和 * 半径の和;
						if(距離の2乗 < 半径の和の2乗){
							var 重なっている距離 = 半径の和 - Math.sqrt(距離の2乗);
							var temporary = Math.abs(x距離) + Math.abs(y距離)

							var 重さ1 = 4 * Math.PI * Math.pow(ball1.r.value, 3) / 3; // ボール1の重さ
							var 重さ2 = 4 * Math.PI * Math.pow(ball2.r.value, 3) / 3; // ボール2の重さ
							var 重さの和 = 重さ1 + 重さ2;
							var 重さの差1 = 重さ1 - 重さ2;
							var 重さの差2 = 重さ2 - 重さ1;

							var 重なっている距離の片方分のずらす距離 = 重なっている距離 / 2;
							// x距離が正ならball1は加算、ball2は減算。
							// y距離が正ならball1は加算、ball2は減算。
							var d = 重なっている距離の片方分のずらす距離 * x距離 / temporary;
							ball1.x.value += d;
							ball2.x.value -= d;
							d = 重なっている距離の片方分のずらす距離 * y距離 / temporary;
							ball1.y.value += d;
							ball2.y.value -= d;

							// 速度を変える。
							var v1dotpab = ball1.xSpeed * x距離 + ball1.ySpeed * y距離;
							var v2dotpab = ball2.xSpeed * x距離 + ball2.ySpeed * y距離;
							var v1ix = v1dotpab / 距離の2乗 * x距離;
							var v1iy = v1dotpab / 距離の2乗 * y距離;
							var v2ix = v2dotpab / 距離の2乗 * x距離;
							var v2iy = v2dotpab / 距離の2乗 * y距離;

							var 重さ1の2倍 = 重さ1 * 2;
							var 重さ2の2倍 = 重さ2 * 2;

							ball1.xSpeed = ball1.xSpeed - v1ix + (重さの差1 * v1ix + 重さ2の2倍 * v2ix) / 重さの和;
							ball1.ySpeed = ball1.ySpeed - v1iy + (重さの差1 * v1iy + 重さ2の2倍 * v2iy) / 重さの和;
							ball2.xSpeed = ball2.xSpeed - v2ix + (重さの差2 * v2ix + 重さ1の2倍 * v1ix) / 重さの和;
							ball2.ySpeed = ball2.ySpeed - v2iy + (重さの差2 * v2iy + 重さ1の2倍 * v1iy) / 重さの和;
						}
					}
				}
			}, 20);

			function remove(){
				var ball = this.ball;
				for(var i = 0, l = balls.length; i < l; i++){
					if (ball == balls[i]){
						balls.splice(i,1);
						this.parentNode.removeChild(this);
						return;
					}
				}
			}

			document.getElementById("field").addEventListener("click", function(){
				var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");

				circle.cx.baseVal.value = MAX_X / 2;
				circle.cy.baseVal.value = MAX_Y / 2;
				circle.r.baseVal.value = 40 + Math.random() * 60;
				circle.setAttribute("fill", "url(#grad" + (Math.floor(Math.random() * 4) + 1) + ")");

				var ball = new Ball(circle);
				ball.ySpeed = Math.random() * -Math.sqrt(重力 * MAX_Y * 2);
				ball.xSpeed = Math.random() * 10 - 5;

				document.documentElement.appendChild(circle);
				balls.push(ball);
			}, false);
		}
	]]></script>
	<defs>
		<radialGradient id="grad1" fx="30%" fy="30%" r="100%">
			<stop offset="0%" stop-color="white"/>
			<stop offset="100%" stop-color="yellow"/>
		</radialGradient>
		<radialGradient id="grad2" fx="30%" fy="30%" r="100%">
			<stop offset="0%" stop-color="white"/>
			<stop offset="100%" stop-color="green"/>
		</radialGradient>
		<radialGradient id="grad3" fx="30%" fy="30%" r="100%">
			<stop offset="0%" stop-color="white"/>
			<stop offset="100%" stop-color="red"/>
		</radialGradient>
		<radialGradient id="grad4" fx="30%" fy="30%" r="100%">
			<stop offset="0%" stop-color="white"/>
			<stop offset="100%" stop-color="blue"/>
		</radialGradient>
	</defs>
	<rect x="0" y="0" width="1000" height="100%" fill="silver" id="field"/>
	<circle cx="100" cy="100" r="40" fill="url(#grad1)"/>
	<circle cx="300" cy="100" r="50" fill="url(#grad2)"/>
	<circle cx="500" cy="100" r="70" fill="url(#grad3)"/>
	<circle cx="800" cy="100" r="100" fill="url(#grad4)"/>
</svg>